#!/bin/bash

# by Iain Visa (iainvisa.com)


# SETUP:
# 1. Make sure this file is in the top folder of the git folder.
# 	e.g. ~/iain/myProject/bashrc.project
# 	NOTE: If the file is not named 'bashrc.project', change SCRIPT_NAME accordingly.
# 	NOTE: If not using bash or .bashrc change RCFILE accordingly.
# 2. Execute this file with with the init argument.
# 	e.g. ./myProject/bashrc.project init
# 	NOTE: The current directory does not matter.
# 3. Run the command to initialise the project (the folder name by default).
# 	e.g. myProject
# 4. To change any variables, execute or source the script with the innit option.
# 	e.g. myProject init
# 	e.g. ./myProject/bashrc.project init


RCFILE=~/.bashrc
SCRIPT_NAME="bashrc.project"
CONDA_ENV="default" # =folder name
RUN_COMMAND="default" # =folder name
SHELL=bash

BLUE="\[\e[94m\]"
YELLOW="\[\e[93m\]"
GREEN="\[\e[92m\]"
CYAN="\[\e[96m\]"
EC="\[\e[0m\]"


if [[ "$(basename -- "$0")" == "$SCRIPT_NAME" ]]; then
	echo "* Executing script"
	FOLDER_PATH=$(dirname $( realpath $0 ))
	echo "* Panson folder at $FOLDER_PATH"
else
	echo "* Sourcing script"
	echo "* Panson folder at $FOLDER_PATH"
fi


cd $FOLDER_PATH || echo "cd $FOLDER_PATH failed, exiting..."

VIM=$(which vim)
echo "* Vim location: $VIM"
vim(){
	echo -en "\033]0;$1\a"

	$VIM $*
}

if [[ $* == *"init"* ]]; then
	PROJECT_NAME="$(basename $FOLDER_PATH)"
	echo "* Initialising project: $PROJECT_NAME"

	START=$(grep -n "#start:$PROJECT_NAME" $RCFILE | cut -d ':' -f1)
	END=$(grep -n "#end:$PROJECT_NAME" $RCFILE | cut -d ':' -f1)

	if [[ $START == "" ]] || [[ $END == "" ]]; then
		echo "* Previous script not found in $RCFILE: $START - $END"
		START=$(wc -l $RCFILE | cut -d " " -f1)
	else
		echo "* Previous script found in $RCFILE: $START - $END"
		echo "* Deleting previous script"
		sed -i "$START","$END""d" $RCFILE
	fi
	if [[ $RUN_COMMAND == "default" ]]; then
		RUN_COMMAND=$PROJECT_NAME
	fi
	echo "* Writing new script in $RCFILE at line: $START"
	SCRIPT="#start:$PROJECT_NAME # Generated by $SCRIPT_NAME\n\
	$RUN_COMMAND (){ \n\
    dos2unix $FOLDER_PATH/$SCRIPT_NAME\n\
		FOLDER_PATH='$FOLDER_PATH'\n\
		PROJECT_NAME='$PROJECT_NAME'\n\
		if [ -f $FOLDER_PATH/$SCRIPT_NAME ]; then\n\
			source $FOLDER_PATH/$SCRIPT_NAME\n\
		fi\n\
	}\n\
#end:$PROJECT_NAME\n"
	sed -i "${START}i \
		$SCRIPT" $RCFILE
	echo "* Reinitailising conda" 
	conda init $SHELL &&
	echo "* Init complete!"
	echo "* Type $RUN_COMMAND to start using the setup"
	exec $SHELL
	exit 0
fi



if [[ $CONDA_ENV == "default" ]]; then
	CONDA_ENV=$PROJECT_NAME
fi

conda activate $CONDA_ENV && CONDA_ENV=$(echo "$CONDA_PREFIX" | rev | cut -d "/" -f1| rev)
echo "* $CONDA_ENV environment activated"
pip install -q -r requirements.txt && echo "* Requirements installed"



echo -n "* Current git branch: " && git rev-parse --abbrev-ref HEAD





prompt_setup(){
	GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	GIT_LOG=$(git log origin/${GIT_BRANCH}..HEAD)
	git_pushed(){
		if [[ $(${GIT_LOG} | wc -l) > 1 ]]; then
			echo "1"
		else
			echo "96"
		fi
	}
  git_commits(){
    if [[ "$(git status -s)" != "" ]]; then
      echo "3"
    else
      echo "96"
    fi
  }
  PS1="${YELLOW}@\u${EC} ${CYAN}(\[\e[$(git_pushed)m\]${PROJECT_NAME}${CYAN}\[\e[$(git_commits)m\]-${GIT_BRANCH}${EC}${CYAN})${GREEN} ($(echo "${CONDA_PREFIX}" | rev | cut -d "/" -f1| rev))${BLUE}:\w ${EC}$ "
}
PROMPT_COMMAND='prompt_setup'


alias bashrc="vim $RCFILE"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."


alias top="echo -en \"\033]0;Top\a\" && top"

alias please="sudo"

gcloud config set project $PROJECT_NAME
gcloud auth application-default set-quota-project $PROJECT_NAME

pull(){
	GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
	echo "* Pulling from branch: origin $GIT_BRANCH"
	git pull origin $GIT_BRANCH
}

push(){
    GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    echo "* Pushing to branch: origin $GIT_BRANCH"
    git push origin $GIT_BRANCH
}

commit(){
    echo "* git commit -a"
    git commit -a
}

test (){
    local title="Local Server"
    if [[ "$*" == *"tunnel"* ]]; then
        export START_NGROK=1
        local title="$title --tunnel"
    else
        export START_NGROK=0
    fi
    if [[ "$*" == *"debug"* ]]; then
        local title="$title --debug"
        echo -en "\033]0;$title\a"
        flask --app main run --host="127.0.0.1" --port=5000 --debug
    else
        echo -en "\033]0;$title\a"
        flask --app main run --host="127.0.0.1" --port=5000
    fi



}
upload (){
  echo -en "\033]0;Cloud Upload\a"
	cd $FOLDER_PATH && gcloud storage cp -r ./static/* gs://panson.firebasestorage.app/
}

deploy (){
  echo -en "\033]0;Web Deploy\a"
	cd $FOLDER_PATH && gcloud run deploy test --source .
}
latest () {
  cd $FOLDER_PATH && gcloud run services update-traffic --to-latest
}
